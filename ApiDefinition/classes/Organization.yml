base: Entity
attributes:
  - name: billing_email
    type: string
  - name: members_url
    type: string
  - name: public_members_url
    type: string
deprecated_attributes:
  - followers_url
  - following_url
  - gists_url
  - gravatar_id
  - organizations_url
  - received_events_url
  - site_admin
  - starred_url
  - subscriptions_url
methods:
  - name: add_to_public_members
    end_point: PUT /orgs/:org/public_members/:user
    parameters:
      - name: user
        type: User
    url_template: attribute public_members_url
    url_template_arguments:
      - name: member
        value: parameter user
    return_strategy: none
  - name: create_fork
    end_point: POST /repos/:owner/:repo/forks
    parameters:
      - name: repo
        type: Repository
    url_template: end_point
    url_template_arguments:
      - name: owner
        value: ownerFromRepo repo
      - name: repo
        value: nameFromRepo repo
    post_arguments:
      - name: organization
        value: attribute login
    return_strategy: instanceFromAttributes(Repository)
  - name: create_repo
    end_point: POST /orgs/:org/repos
    parameters:
      - name: name
        type: string
    optional_parameters:
      - name: description
        type: string
      - name: homepage
        type: string
      - name: private
        type: bool
      - name: has_issues
        type: bool
      - name: has_wiki
        type: bool
      - name: has_downloads
        type: bool
      - name: team_id
        type: Team
      - name: auto_init
        type: bool
      - name: gitignore_template
        type: Github.GitIgnoreTemplate
    url_template: attribute repos_url
    post_arguments:
      - name: name
        value: parameter name
      - name: description
        value: parameter description
      - name: homepage
        value: parameter homepage
      - name: private
        value: parameter private
      - name: has_downloads
        value: parameter has_downloads
      - name: has_issues
        value: parameter has_issues
      - name: has_wiki
        value: parameter has_wiki
      - name: team_id
        value: parameter team_id
      - name: auto_init
        value: parameter auto_init
      - name: gitignore_template
        value: parameter gitignore_template
    return_strategy: instanceFromAttributes(Repository)
  - name: create_team
    end_point: POST /orgs/:org/teams
    parameters:
      - name: name
        type: string
    optional_parameters:
      - name: repo_names
        type:
          meta: list
          type: Repository
      - name: permission
        type:
          meta: enum
          values: [pull, push, admin]
    url_template: end_point
    url_template_arguments:
      - name: org
        value: attribute login
    post_arguments:
      - name: name
        value: parameter name
      - name: permission
        value: parameter permission
      - name: repo_names
        value: parameter repo_names
    return_strategy: instanceFromAttributes(Team)
  - name: edit
    end_point: PATCH /orgs/:org
    optional_parameters:
      - name: billing_email
        type: string
      - name: blog
        types: [string, Reset]
      - name: company
        types: [string, Reset]
      - name: email
        types: [string, Reset]
      - name: location
        types: [string, Reset]
      - name: name
        types: [string, Reset]
    url_template: attribute url
    post_arguments:
      - name: billing_email
        value: parameter billing_email
      - name: blog
        value: parameter blog
      - name: company
        value: parameter company
      - name: email
        value: parameter email
      - name: location
        value: parameter location
      - name: name
        value: parameter name
    return_strategy: updateSelfThen(none)
  - name: get_members
    end_point: GET /orgs/:org/members
    optional_parameters:
      - name: filter
        type:
          meta: enum
          values: [all, 2fa_disabled]
    url_template: attribute members_url
    url_arguments:
      - name: filter
        value: parameter filter
    return_strategy: paginatedList(User)
  - name: get_public_members
    end_point: GET /orgs/:org/public_members
    url_template: attribute public_members_url
    return_strategy: paginatedList(User)
  - name: get_repo
    end_point: GET /repos/:owner/:repo
    parameters:
      - name: repo
        type: string
    url_template: end_point
    url_template_arguments:
      - name: owner
        value: attribute login
      - name: repo
        value: parameter repo
    return_strategy: instanceFromAttributes(Repository)
  - name: get_repos
    end_point: GET /orgs/:org/repos
    optional_parameters:
      - name: type
        type:
          meta: enum
          values: [all, public, private, forks, sources, member]
    url_template: attribute repos_url
    url_arguments:
      - name: type
        value: parameter type
    return_strategy: paginatedList(Repository)
  - name: get_teams
    end_point: GET /orgs/:org/teams
    url_template: end_point
    url_template_arguments:
      - name: org
        value: attribute login
    return_strategy: paginatedList(Team)
  - name: has_in_members
    end_point: GET /orgs/:org/members/:user
    parameters:
      - name: user
        type: User
    url_template: attribute members_url
    url_template_arguments:
      - name: member
        value: parameter user
    return_strategy: boolFromStatus
  - name: has_in_public_members
    end_point: GET /orgs/:org/public_members/:user
    parameters:
      - name: user
        type: User
    url_template: attribute public_members_url
    url_template_arguments:
      - name: member
        value: parameter user
    return_strategy: boolFromStatus
  - name: remove_from_members
    end_point: DELETE /orgs/:org/members/:user
    parameters:
      - name: user
        type: User
    url_template: attribute members_url
    url_template_arguments:
      - name: member
        value: parameter user
    return_strategy: none
  - name: remove_from_public_members
    end_point: DELETE /orgs/:org/public_members/:user
    parameters:
      - name: user
        type: User
    url_template: attribute public_members_url
    url_template_arguments:
      - name: member
        value: parameter user
    return_strategy: none
